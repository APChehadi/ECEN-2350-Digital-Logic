
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Lab3(
	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);

// Blank LEDs 6:3
assign LEDR[6:3] = 4'b0000;
SevenSeg SS1(.HEX(HEX1), .NUM(8'd88));
SevenSeg SS2(.HEX(HEX2), .NUM(8'd88));
SevenSeg SS3(.HEX(HEX3), .NUM(8'd88));
SevenSeg SS4(.HEX(HEX4), .NUM(8'd88));
SevenSeg SS5(.HEX(HEX5), .NUM(8'd88));

// Latch KEY[0] reset
reg reset_latch = 1'b0;
wire reset_n;
always @(negedge KEY[0])
	begin
		reset_latch <= ~reset_latch;
	end
assign reset_n = reset_latch;

// Latch KEY[1] right/left turn signal
reg turn_sig_latch = 1'b0;
wire key1_latch;
always @(negedge KEY[1])
	begin
		turn_sig_latch <= ~turn_sig_latch;
	end
assign key1_latch = turn_sig_latch;

// Clock Divider
wire s_clk;
clock_divider #(1_000_000) CD0(.clk(ADC_CLK_10), .reset_n(reset_n), .slower_clk(s_clk));

// Wire Declarations
wire [2:0] CurrentState;
wire [2:0] NextState;
wire [2:0] CurrentState_mem;
wire [2:0] CurrentState_manual;


// Instantiate Modules
CSL CSL0(.CLK(s_clk), .reset_n(reset_n), .NextState(NextState), .CurrentState(CurrentState_manual));

NSL NSL0(.turn_sig_latch(key1_latch), .SW(SW[1:0]), .CurrentState(CurrentState_manual), .NextState(NextState));

state_machine SM0(.CLK(s_clk), .CurrentState(CurrentState_mem));

output_mux OM0(.CurrentState_memory(CurrentState_mem), .CurrentState_manual(CurrentState_manual), .SW9(SW[9]), .CurrentState(CurrentState));

OL OL0(.CLK(s_clk), .reset_n(reset_n), .CurrentState(CurrentState), .SW(SW[1:0]), .HEX0(HEX0), .LEDR_L(LEDR[9:7]), .LEDR_R(LEDR[2:0]));

endmodule